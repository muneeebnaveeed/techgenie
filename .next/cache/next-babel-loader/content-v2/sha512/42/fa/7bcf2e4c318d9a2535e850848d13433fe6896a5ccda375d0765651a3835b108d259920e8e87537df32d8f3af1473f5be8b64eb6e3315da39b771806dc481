{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\MuneebNaveed\\\\Desktop\\\\Development\\\\IRFAN\\\\webexperio\\\\src\\\\components\\\\Grid\\\\Grid.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\n\nvar Grid = function Grid(_ref) {\n  _s();\n\n  var images = _ref.images,\n      rowHeight = _ref.rowHeight,\n      _ref$margin = _ref.margin,\n      margin = _ref$margin === void 0 ? 0 : _ref$margin,\n      width = _ref.width;\n\n  var _useState = useState(false),\n      showLightbox = _useState[0],\n      setShowLightbox = _useState[1];\n\n  var _useState2 = useState(),\n      selectedIndex = _useState2[0],\n      setSelectedIndex = _useState2[1];\n\n  var handleImageClick = function handleImageClick(e) {\n    setSelectedIndex(e.target.getAttribute(\"data-index\"));\n    setShowLightbox(true);\n  }; // Creates <img/> tags from image and row metadata.\n  //\n\n\n  var imageDataToImgTag = useCallback(function (image, totalIndex, rowIndex, row, imageWidth) {\n    var calculatedRowHeight = width / imageWidth; // Calculate the dimensions and margin of each image. This needs\n    // to be inline since we need some values from the JS.\n\n    var imageStyle = {\n      height: calculatedRowHeight + \"px\",\n      // Take back out the margin from the ratio.\n      width: calculatedRowHeight * image[1] - margin + \"px\",\n      // Don't add margin to the last item in a row\n      marginRight: rowIndex === row.length - 1 ? 0 : margin + \"px\"\n    };\n    return /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"grid-img\",\n      style: imageStyle,\n      \"data-index\": totalIndex,\n      onClick: handleImageClick,\n      src: image[0].src,\n      alt: image[0].alt\n    }, \"img_\" + image[0].id + \"_\" + image[1], false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, _this);\n  }, [margin, width]); // Build the rows of the grid. Each row must have an aspect ratio of at least minAspectRatio.\n  // Then, each image in the row is scaled up to fill the desired width of the row, while maintaining\n  // the aspect ratio of each photo in the row.\n\n  var rows = useMemo(function () {\n    var allRows = [];\n    var row = [];\n    var widthSoFar = 0; // We'll use this value to calculate how many pictures we need in a row.\n    // The \"min\" aspect ratio is the aspect ratio that will allow the row to\n    // span the correct length while being between minRowHeight and maxRowHeight\n\n    var minAspectRatio = width / rowHeight;\n\n    for (var i = 0; i < images.length; i++) {\n      var image = images[i]; // Add the margin into the ratio.\n\n      var ratio = image.width / image.height; // If we're less than the min aspectRatio then keep adding more items to the row.\n\n      if (widthSoFar <= minAspectRatio && i !== images.length - 1) {\n        // Add the ratio contributed by the margin.\n        ratio += margin / image.height;\n        row.push([image, ratio]);\n        widthSoFar += ratio;\n      } else {\n        if (i === images.length - 1) {\n          row.push([image, ratio]);\n          widthSoFar += ratio;\n        }\n\n        var imageElements = [];\n\n        for (var j = 0; j < row.length; j++) {\n          imageElements.push(imageDataToImgTag(row[j], i - row.length + j, j, row, widthSoFar));\n        } // Add the finished row to the list of all rows.\n\n\n        allRows.push(imageElements); // Start a new row with the current image as the first image\n\n        row = [[image, ratio]];\n        widthSoFar = ratio;\n      }\n    } // This style also needs to be inline since we use the padding prop.\n    // (Would be nice to use something like styled-components for this instead)\n\n\n    var divStyle = {\n      display: \"flex\",\n      marginBottom: margin + \"px\"\n    };\n    return allRows.map(function (row, index) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid-row\",\n        style: divStyle,\n        children: row\n      }, \"row_\" + index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, _this);\n    });\n  }, [width, imageDataToImgTag, images, margin, rowHeight]);\n  var handleClose = useCallback(function () {\n    setShowLightbox(false);\n  }, []);\n  var handlePrev = useCallback(function () {\n    setSelectedIndex(function (selectedIndex) {\n      return (+selectedIndex - 1 + images.length) % images.length;\n    });\n  }, [images.length]);\n  var handleNext = useCallback(function () {\n    setSelectedIndex(function (selectedIndex) {\n      return (+selectedIndex + 1) % images.length;\n    });\n  }, [images.length]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: rows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, _this), showLightbox ? /*#__PURE__*/_jsxDEV(Lightbox, {\n      selectedImage: images[selectedIndex],\n      onClose: handleClose,\n      onPrev: handlePrev,\n      onNext: handleNext\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }, _this) : null]\n  }, void 0, true);\n};\n\n_s(Grid, \"JKbk1imZ09zdMiMEQ3LLMdbF9oA=\");\n\n_c = Grid;\nGrid.propTypes = {\n  images: PropTypes.arrayOf(PropTypes.shape({\n    src: PropTypes.string.isRequired,\n    height: PropTypes.number.isRequired,\n    width: PropTypes.number.isRequired\n  })).isRequired,\n  rowHeight: PropTypes.number.isRequired,\n  margin: PropTypes.number\n};\nexport default Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["C:/Users/MuneebNaveed/Desktop/Development/IRFAN/webexperio/src/components/Grid/Grid.js"],"names":["React","useState","useCallback","useMemo","PropTypes","Grid","images","rowHeight","margin","width","showLightbox","setShowLightbox","selectedIndex","setSelectedIndex","handleImageClick","e","target","getAttribute","imageDataToImgTag","image","totalIndex","rowIndex","row","imageWidth","calculatedRowHeight","imageStyle","height","marginRight","length","src","alt","id","rows","allRows","widthSoFar","minAspectRatio","i","ratio","push","imageElements","j","divStyle","display","marginBottom","map","index","handleClose","handlePrev","handleNext","propTypes","arrayOf","shape","string","isRequired","number"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Grid = ({ images, rowHeight, margin = 0, width }) => {\n    const [showLightbox, setShowLightbox] = useState(false);\n    const [selectedIndex, setSelectedIndex] = useState();\n\n    const handleImageClick = (e) => {\n        setSelectedIndex(e.target.getAttribute(\"data-index\"));\n        setShowLightbox(true);\n    };\n\n    // Creates <img/> tags from image and row metadata.\n    //\n    const imageDataToImgTag = useCallback(\n        (image, totalIndex, rowIndex, row, imageWidth) => {\n            const calculatedRowHeight = width / imageWidth;\n\n            // Calculate the dimensions and margin of each image. This needs\n            // to be inline since we need some values from the JS.\n            let imageStyle = {\n                height: calculatedRowHeight + \"px\",\n\n                // Take back out the margin from the ratio.\n                width: calculatedRowHeight * image[1] - margin + \"px\",\n\n                // Don't add margin to the last item in a row\n                marginRight: rowIndex === row.length - 1 ? 0 : margin + \"px\",\n            };\n            return (\n                <img\n                    className=\"grid-img\"\n                    style={imageStyle}\n                    data-index={totalIndex}\n                    onClick={handleImageClick}\n                    src={image[0].src}\n                    alt={image[0].alt}\n                    key={\"img_\" + image[0].id + \"_\" + image[1]}\n                />\n            );\n        },\n        [margin, width]\n    );\n\n    // Build the rows of the grid. Each row must have an aspect ratio of at least minAspectRatio.\n    // Then, each image in the row is scaled up to fill the desired width of the row, while maintaining\n    // the aspect ratio of each photo in the row.\n    const rows = useMemo(() => {\n        let allRows = [];\n        let row = [];\n        let widthSoFar = 0;\n\n        // We'll use this value to calculate how many pictures we need in a row.\n        // The \"min\" aspect ratio is the aspect ratio that will allow the row to\n        // span the correct length while being between minRowHeight and maxRowHeight\n        const minAspectRatio = width / rowHeight;\n\n        for (let i = 0; i < images.length; i++) {\n            let image = images[i];\n\n            // Add the margin into the ratio.\n            let ratio = image.width / image.height;\n\n            // If we're less than the min aspectRatio then keep adding more items to the row.\n            if (widthSoFar <= minAspectRatio && i !== images.length - 1) {\n                // Add the ratio contributed by the margin.\n                ratio += margin / image.height;\n                row.push([image, ratio]);\n                widthSoFar += ratio;\n            } else {\n                if (i === images.length - 1) {\n                    row.push([image, ratio]);\n                    widthSoFar += ratio;\n                }\n                let imageElements = [];\n                for (let j = 0; j < row.length; j++) {\n                    imageElements.push(\n                        imageDataToImgTag(row[j], i - row.length + j, j, row, widthSoFar)\n                    );\n                }\n                // Add the finished row to the list of all rows.\n                allRows.push(imageElements);\n\n                // Start a new row with the current image as the first image\n                row = [[image, ratio]];\n                widthSoFar = ratio;\n            }\n        }\n\n        // This style also needs to be inline since we use the padding prop.\n        // (Would be nice to use something like styled-components for this instead)\n        const divStyle = {\n            display: \"flex\",\n            marginBottom: margin + \"px\",\n        };\n        return allRows.map((row, index) => (\n            <div className=\"grid-row\" style={divStyle} key={\"row_\" + index}>\n                {row}\n            </div>\n        ));\n    }, [width, imageDataToImgTag, images, margin, rowHeight]);\n\n    const handleClose = useCallback(() => {\n        setShowLightbox(false);\n    }, []);\n\n    const handlePrev = useCallback(() => {\n        setSelectedIndex((selectedIndex) => (+selectedIndex - 1 + images.length) % images.length);\n    }, [images.length]);\n\n    const handleNext = useCallback(() => {\n        setSelectedIndex((selectedIndex) => (+selectedIndex + 1) % images.length);\n    }, [images.length]);\n\n    return (\n        <>\n            <div className=\"grid-container\">{rows}</div>\n            {showLightbox ? (\n                <Lightbox\n                    selectedImage={images[selectedIndex]}\n                    onClose={handleClose}\n                    onPrev={handlePrev}\n                    onNext={handleNext}\n                />\n            ) : null}\n        </>\n    );\n};\n\nGrid.propTypes = {\n    images: PropTypes.arrayOf(\n        PropTypes.shape({\n            src: PropTypes.string.isRequired,\n            height: PropTypes.number.isRequired,\n            width: PropTypes.number.isRequired,\n        })\n    ).isRequired,\n    rowHeight: PropTypes.number.isRequired,\n    margin: PropTypes.number,\n};\n\nexport default Grid;\n"]},"metadata":{},"sourceType":"module"}